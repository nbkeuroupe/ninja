"""Black Rock Payment Terminal - Merchant Settlement Interface"""import loggingimport datetimefrom typing import Dict, Any, Optional, Listfrom sqlalchemy.orm import Sessionfrom .models import SettlementInfo, SettlementHistoryItem, SettlementHistoryResponsefrom ..database.crud import get_transactions, get_all_payout_settingslogger = logging.getLogger(__name__)class MerchantSettlementInterface:    """    Interface for merchant settlement fund visibility    """        def __init__(self, db_session: Session, merchant_id: str):        self.db = db_session        self.merchant_id = merchant_id        def get_settlement_info(self) -> SettlementInfo:        """        Get merchant settlement information        """        logger.info(f"Retrieving settlement info for merchant {self.merchant_id}")                try:            # Get recent transactions            transactions = get_transactions(self.db, self.merchant_id, limit=100)                        # Calculate settlement info            total_transactions = len(transactions)            total_amount = sum(t.amount for t in transactions if t.status == "APPROVED" or t.status == "OFFLINE_APPROVED")            pending_settlement = sum(t.amount for t in transactions if t.status == "PENDING")                        # Get payout settings            payout_settings = get_all_payout_settings(self.db, self.merchant_id)                        bank_account = None            crypto_wallet = None                        for setting in payout_settings:                if setting.method == "BANK":                    # Mask account number for security                    if setting.account_number:                        bank_account = f"{setting.bank_name}: ...{setting.account_number[-4:]}"                elif setting.method == "CRYPTO":                    # Mask wallet address for security                    if setting.wallet_address:                        crypto_wallet = f"{setting.crypto_currency}: ...{setting.wallet_address[-6:]}"                        # Calculate settlement dates (simplified for demonstration)            last_settlement_date = None            next_settlement_date = None                        if transactions:                # Find the latest approved transaction                approved_transactions = [t for t in transactions if t.status in ["APPROVED", "OFFLINE_APPROVED"]]                if approved_transactions:                    last_transaction = max(approved_transactions, key=lambda t: t.timestamp)                    last_settlement_date = last_transaction.timestamp.isoformat()                                # Next settlement would be daily                next_settlement_date = (datetime.datetime.now() + datetime.timedelta(days=1)).isoformat()                        # Determine primary currency from transactions            currency = "USD"            if transactions:                currency = transactions[0].currency                        return SettlementInfo(                merchant_id=self.merchant_id,                total_transactions=total_transactions,                total_amount=total_amount,                currency=currency,                pending_settlement=pending_settlement,                last_settlement_date=last_settlement_date,                next_settlement_date=next_settlement_date,                bank_account=bank_account,                crypto_wallet=crypto_wallet            )                    except Exception as e:            logger.error(f"Error retrieving settlement info: {str(e)}")            raise        def get_settlement_history(self) -> SettlementHistoryResponse:        """        Get merchant settlement history        """        logger.info(f"Retrieving settlement history for merchant {self.merchant_id}")                try:            # In a real implementation, this would query a settlements table            # For demonstration, we'll create mock history based on transactions                        transactions = get_transactions(self.db, self.merchant_id, limit=50)                        # Create mock settlement history            history = []                        # Group transactions by day for settlement history            transaction_days = {}            for transaction in transactions:                if transaction.status in ["APPROVED", "OFFLINE_APPROVED"]:                    date_key = transaction.timestamp.date()                    if date_key not in transaction_days:                        transaction_days[date_key] = []                    transaction_days[date_key].append(transaction)                        # Create settlement items for each day            for date_key, day_transactions in transaction_days.items():                if day_transactions:                    total_amount = sum(t.amount for t in day_transactions)                    currency = day_transactions[0].currency                                        # Determine settlement method from payout settings                    payout_settings = get_all_payout_settings(self.db, self.merchant_id)                    method = "BANK"  # Default to bank                    if payout_settings:                        method = payout_settings[0].method                                        history_item = SettlementHistoryItem(                        settlement_id=f"SETTLE_{date_key.isoformat()}_{self.merchant_id}",                        amount=total_amount,                        currency=currency,                        method=method,                        status="COMPLETED" if datetime.datetime.now().date() > date_key else "PENDING",                        initiated_date=date_key.isoformat(),                        completed_date=date_key.isoformat() if datetime.datetime.now().date() > date_key else None,                        reference_number=f"REF_{str(date_key).replace('-', '')}"                    )                    history.append(history_item)                        return SettlementHistoryResponse(                merchant_id=self.merchant_id,                history=history            )                    except Exception as e:            logger.error(f"Error retrieving settlement history: {str(e)}")            raise